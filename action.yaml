---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# pypi-publish-action
name: '📦 PyPI Publish Package'
description: 'Publishes a Python project to the Python Package Index'

inputs:
  path_prefix:
    description: 'Directory location containing project code'
    required: false
    type: string
    default: '.'
  environment:
    # When defined/used MUST match the trusted publishing setup in PyPI
    description: 'Environment used to source credentials'
    type: 'string'
    required: false
    default: 'production'
  tag:
    description: 'Tag/version string for this release/build'
    required: true
    type: 'string'
  artefact_path:
    description: 'Path/location to build artefacts'
    required: false
    type: 'string'
    default: 'dist'
  one_password_item:
    description: 'Path to 1Password vault credential for PyPI'
    required: false
    type: 'string'
  op_service_account_token:
    description: '1Password service account credential to access vault'
    required: false
    type: 'string'
  pypi_credential:
    description: 'PyPI API credential from GitHub secrets'
    required: false
    type: 'string'
  publish_disable:
    description: 'Disables the final publishing step that uploads packages'
    type: boolean
    required: false
    default: false
  attestations:
    description: 'Enables upload/publishing support for attestations'
    type: boolean
    required: false
    default: false
  no_checkout:
    # Required during action testing to avoid changes to local files
    description: 'Do not checkout local repository; used for testing'
    type: 'boolean'
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    # Need repository content to extract project name
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      if: inputs.no_checkout != 'true'

    - name: "Verify path prefix"
      if: inputs.path_prefix != '.'
      shell: bash
      run: |
        # Verify path prefix is valid directory path
        if [ ! -d "${{ inputs.path_prefix }}" ]; then
          echo "Error: invalid path/prefix to project directory ❌"
          exit 1
        fi

    - name: 'Extract project/repository naming'
      id: naming
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-name-action@8711a5e8206beb42a73f95460972e2ea80b5f946 # v0.1.3
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: '⬇ Download build artefacts'
      # yamllint disable-line rule:line-length
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: "${{ steps.naming.outputs.python_project_name }}"
        path: "${{ inputs.path_prefix }}/${{ inputs.artefact_path }}"

    - name: 'Derive publishing parameters'
      id: parameters
      shell: bash
      run: |
        # Derive publishing parameters
        if [ ${{ inputs.environment }} != "production" ]; then
          echo "base_url=https://test.pypi.org" >> "$GITHUB_ENV"
          echo "publish_url=https://test.pypi.org/legacy/" >> "$GITHUB_ENV"
        else
          echo "base_url=https://pypi.org" >> "$GITHUB_ENV"
          echo "publish_url=https://upload.pypi.org/legacy/" >> "$GITHUB_ENV"
        fi

    - name: 'Remove unsupported artefact file types'
      id: files
      shell: bash
      run: |
        # Remove unsupported artefact file types
        find "${{ inputs.path_prefix }}/${{ inputs.artefact_path }}" \
          ! -name '*.whl' ! -name '*.tar.gz' \
          -type f -exec rm -f {} + || true

    - name: 'Checking package index for build/release'
      id: check-remote
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/pypi-version-check-action@33fa0ac1d20dee72e4430b6bfa728ae61e7079f2 # v0.1.0
      with:
        index_url: "${{ env.base_url }}/simple"
        package_name: "${{ steps.naming.outputs.python_project_name }}"
        package_version: "${{ inputs.tag }}"

    - name: 'Determine publishing method'
      id: conditions
      shell: bash
      run: |
        # Determine publishing method
        if [ "${{ steps.check-remote.outputs.package_match }}" = "true" ]; then
          publish_method="Trusted Publishing"
          echo "Project previously published; using Trusted Publishing ✅"
        fi

        if [ "${{ steps.check-remote.outputs.version_match }}" != 'true' ]; then
          echo "This build/release has NOT previously been published ✅"
        else
          echo "This build/release has already been published ❌"
          if [ "${{ inputs.environment }}" = "production" ]; then
            # This is an error for production/tagged releases
            echo "This build/release has already been published ❌" \
              >> "$GITHUB_STEP_SUMMARY"
            exit 1
          else
            # Publishing is skipped for non-production workflow runs
            publish_method="Skipped"
            exit 0
          fi
        fi

        if [ "$publish_method" != "Trusted Publishing" ]; then
          echo "Trusted publishing NOT available, using fallback methods 👇🏻"

          ### 1Password Vault Credential ###

          if [ -z "${{ inputs.op_service_account_token }}" ] || \
            [ -z "${{ inputs.one_password_item }}" ]; then
            echo "Unable to use 1Password to retrieve publishing key ❌"
            echo "Two required parameters MUST be set/available"
            echo "Secret:   op_service_account_token"
            echo "Variable: one_password_item"
          else
            echo "Publishing will use 1Password vault ✅"
            publish_method="1Password Vault"
          fi

          ### GitHub Secret ###

          if [ -z "${{ inputs.pypi_credential }}" ]; then
            echo "GitHub credential NOT set/available: pypi_credential"
            echo "Publishing cannot continue without a valid method ❌"
            echo "Publishing cannot continue without a valid method ❌" \
              >> "$GITHUB_STEP_SUMMARY"
            exit 1
          elif [ "$publish_method" != "1Password Vault" ]; then
            echo "Publishing will use GitHub secret ✅"
            publish_method="GitHub Secret"
          fi

        fi

        echo "Publishing to: ${{ env.base_url }}"
        echo "Environment: ${{ inputs.environment }}]"
        echo "publish_method=$publish_method" >> "$GITHUB_ENV"
        echo "publish_method=$publish_method" >> "$GITHUB_OUTPUT"

    - name: 'Publish PyPI [Trusted Publishing]'
      # v1.12.x has changed the docker container setup/creation process
      # Currently it causes failures, and will need careful testing
      # Also, be cautious pinning v1.12.x to a SHA commit value:
      # https://github.com/pypa/gh-action-pypi-publish/discussions/287
      # yamllint disable-line rule:line-length
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      # yamllint disable-line rule:line-length
      if: env.publish_method == 'Trusted Publishing' && inputs.publish_disable == 'false'
      with:
        repository-url: "${{ env.publish_url }}"
        packages-dir: "${{ inputs.path_prefix }}/${{ inputs.artefact_path }}"
        # We already validated earlier in the pipeline (twine)
        verify-metadata: false
        attestations: "${{ inputs.attestations }}"
        # Show checksum values
        print-hash: true
        # Optional debugging, pretty much essential for information on failures
        verbose: true

    - name: 'Retrieve Credential [1Password]'
      id: one-password-pypi-test
      if: env.publish_method == '1Password Vault'
      # yamllint disable-line rule:line-length
      uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2.0.0
      with:
        # Export loaded secrets as environment variables
        export-env: true
      env:
        pypi_credential: "${{ inputs.one_password_item}}"
        op_service_account_token: "${{ inputs.op_service_account_token }}"

    # Used only once prior to trusted publishing being configured
    - name: 'Publish PyPI [1Password Credential]'
      # v1.12.x has changed the docker container setup/creation process
      # Currently it causes failures, and will need careful testing
      # Also, be cautious pinning v1.12.x to a SHA commit value:
      # https://github.com/pypa/gh-action-pypi-publish/discussions/287
      # yamllint disable-line rule:line-length
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      # yamllint disable-line rule:line-length
      if: env.publish_method == '1Password Vault' && inputs.publish_disable == 'false'
      with:
        repository-url: "${{ env.publish_url }}"
        packages-dir: "${{ inputs.path_prefix }}/${{ inputs.artefact_path }}"
        verify-metadata: false
        # Credential retrieved from 1Password using service account
        password: "${{ inputs.pypi_credential}}"
        attestations: "${{ inputs.attestations }}"
        print-hash: true
        verbose: true

    # Fallback method using credential stored as GitHub secret
    - name: 'Publish PyPI [GitHub Secret]'
      # v1.12.x has changed the docker container setup/creation process
      # Currently it causes failures, and will need careful testing
      # Also, be cautious pinning v1.12.x to a SHA commit value:
      # https://github.com/pypa/gh-action-pypi-publish/discussions/287
      # yamllint disable-line rule:line-length
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      if:
        # yamllint disable-line rule:line-length
        env.publish_method == 'GitHub Secret' && inputs.publish_disable == 'false'
      with:
        repository-url: "${{ env.publish_url }}"
        packages-dir: "${{ inputs.path_prefix }}/${{ inputs.artefact_path }}"
        verify-metadata: false
        # Publishing API key stored as secret/variable in GitHub
        password: "${{ inputs.pypi_credential }}"
        attestations: "${{ inputs.attestations }}"
        print-hash: true
        verbose: true

    - name: 'Print summary/job output'
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Print summary/job output
        if [ "${{ env.publish_disable }}" = 'true' ]; then
          echo "### Publishing Disabled: Dry Run 🛑" >> "$GITHUB_STEP_SUMMARY"
        elif [ "${{ env.publish_method }}" = 'Skipped' ]; then
          echo "### Publishing Skipped: Previously Released ⛔️" >> "$GITHUB_STEP_SUMMARY"
        elif [ ${{ env.base_url }} != "https://pypi.org" ]; then
          echo '# 🧪 Test PyPI Release' >> "$GITHUB_STEP_SUMMARY"
        else
          echo '# 🚀 PyPI Release' >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "Authenticated using: ${{ env.publish_method }}" >> "$GITHUB_STEP_SUMMARY"
        if [ "${{ env.publish_disable }}" != "true" ]; then
          echo "🔗 ${{ env.base_url }}/project/${{ steps.naming.outputs.python_project_name }}/${{ inputs.tag }}/" >> "$GITHUB_STEP_SUMMARY"
        fi
